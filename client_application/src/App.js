import React, { Component } from "react";
import { Route, Switch, Redirect } from "react-router-dom";
import LoginPage from "./components/UserManagement/loginPage";
import Header from "./components/common/Header";
import Footer from "./components/common/Footer";
import AdminPage from "./components/UserManagement/AdminPanel/AdminPage";
import HomePage from "./components/Home/HomePage";
import Item from "./components/Item/Item";
import Cart from "./components/Cart/Cart";
import Payment from "./components/Payment/payment";

import ProfilePage from "./components/UserManagement/Profile/ProfilePage";
import { getCurrentUser } from "./util/APIUtils";
import { ACCESS_TOKEN } from "./constants";
import PrivateRoute from "./components/common/PrivateRoute";
import OAuth2RedirectHandler from "./services/oauth2/OAuth2RedirectHandler";
import NotFound from "./components/common/NotFound";
import NoPermission from "./components/common/NoPermision";

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      authenticated: false,
      currentUser: null,
      loading: false,
    };

    this.loadCurrentlyLoggedInUser = this.loadCurrentlyLoggedInUser.bind(this);
    this.handleLogout = this.handleLogout.bind(this);
  }

  loadCurrentlyLoggedInUser() {
    this.setState({
      loading: true,
    });

    getCurrentUser()
      .then((response) => {
        this.setState({
          currentUser: response,
          authenticated: true,
          loading: false,
        });
      })
      .catch((error) => {
        this.setState({
          loading: false,
        });
      });
  }

  handleLogout() {
    localStorage.clear()
    this.setState({
      authenticated: false,
      currentUser: null,
    });
    window.location = "/login";
    alert("You're safely logged out!");
  }

  componentDidMount() {
    this.loadCurrentlyLoggedInUser();
  }

  render() {
    console.log(this.state.currentUser);
    return (
      <React.Fragment>
        <Header user={this.state.currentUser} onLogout={this.handleLogout} />

        <Switch>
          {!this.state.authenticated ? (
            <>
              <Route
                path="/login"
                render={(props) => (
                  <LoginPage
                    authenticated={this.state.authenticated}
                    {...props}
                  />
                )}
              ></Route>
              <Route
                path="/oauth2/redirect"
                component={OAuth2RedirectHandler}
              ></Route>
              <Route component={NotFound}></Route>
            </>
          ) : (
            <>
              <Route
                path="/admin"
                component={
                  this.state.currentUser.isAdmin ? AdminPage : NoPermission
                }
              />
              <Route
                path="/item/:id"
                render={(props) => (
                  <Item
                    user={this.state.currentUser}
                    {...props}
                  />
                )}
              ></Route>
              <Route
                path="/cart"
                render={(props) => (
                  <Cart
                    user={this.state.currentUser}
                    {...props}
                  />
                )}
              ></Route>
              <Route
                path="/payment"
                render={(props) => (
                  <Payment
                    user={this.state.currentUser}
                    {...props}
                  />
                )}
              ></Route>
              <Route path="/home" component={HomePage} />
              <PrivateRoute
                path="/profile"
                authenticated={this.state.authenticated}
                currentUser={this.state.currentUser}
                component={ProfilePage}
              ></PrivateRoute>
              {/* <Route path="/" render={() => <Redirect to="/home" />} /> */}
            </>
          )}
        </Switch>
        <Footer />
      </React.Fragment>
    );
  }
}
