package com.server_application.ssd.Controller;

import com.server_application.ssd.DTO.AuthUser;
import com.server_application.ssd.Models.User;
import com.server_application.ssd.Service.UserService;
import com.server_application.ssd.Service.UserServiceInterface;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/user")
public class UserController {

    private final UserService userService;
    @Autowired
    public UserServiceInterface userServiceInterface;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/auth")
    public ResponseEntity<?> authUser(@RequestBody AuthUser authUser){

        try {
            User user = userServiceInterface.auth(authUser);
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Invalid input. Cannot login to the system");
        }
    }

    @PostMapping("/createUser")
    public ResponseEntity<?> createNewUser(@RequestBody User user){

        try {
            userServiceInterface.createUser(user);
            return ResponseEntity.ok("User Created Successfully");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Invalid input. Cannot create User");
        }
    }

    @GetMapping("/getUser/{userId}")
    public ResponseEntity<?> getUserById(@PathVariable int userId){

        try {
            User user = userServiceInterface.getUserById(userId);
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Invalid input. Cannot get user Details");
        }

    }

    @PostMapping("/updateUser")
    public ResponseEntity<?> updateUser(@RequestBody User user){

        try {
            userServiceInterface.updateUser(user);
            return ResponseEntity.ok("User Updated Successfully");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Failed to update user details");
        }
    }

    @DeleteMapping("/deleteUser/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable int userId){

        try {
            userServiceInterface.deleteUser(userId);
            return ResponseEntity.ok("User Deleted Successfully");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Failed to delete user details");
        }
    }
}
