package com.server_application.ssd.Controller;

import com.server_application.ssd.DTO.AuthUser;
import com.server_application.ssd.Models.User;
import com.server_application.ssd.Service.UserService;
import com.server_application.ssd.Service.UserServiceInterface;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/user")
public class UserController {

    @Autowired
    public UserServiceInterface userServiceInterface;

    private static final Logger LOGGER = LogManager.getLogger(UserController.class);

    @PostMapping("/auth")
    public ResponseEntity<?> authUser(@RequestBody AuthUser authUser){

        try {
            User user = userServiceInterface.auth(authUser);
            LOGGER.info("Successfully Authenticate user email: "+authUser.getEmail());
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            LOGGER.error("Invalid input. Cannot login to the system");
            return ResponseEntity.badRequest().body("Invalid input. Cannot login to the system");
        }
    }

    @PostMapping("/createUser")
    public ResponseEntity<?> createNewUser(@RequestBody User user){

        try {
            userServiceInterface.createUser(user);
            LOGGER.info("User Created Successfully email: "+user.getEmail());
            return ResponseEntity.ok("User Created Successfully");
        } catch (Exception e) {
            LOGGER.error("Invalid input. Cannot create User");
            return ResponseEntity.badRequest().body("Invalid input. Cannot create User");
        }
    }

    @GetMapping("/getUser/{userId}")
    public ResponseEntity<?> getUserById(@PathVariable int userId){

        try {
            User user = userServiceInterface.getUserById(userId);
            LOGGER.info("Successfully fetched user Details by email: "+user.getEmail());
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            LOGGER.error("Invalid input. Cannot get user Details");
            return ResponseEntity.badRequest().body("Invalid input. Cannot get user Details");
        }

    }

    @PostMapping("/updateUser")
    public ResponseEntity<?> updateUser(@RequestBody User user){

        try {
            userServiceInterface.updateUser(user);
            LOGGER.info("User Updated Successfully by email: "+user.getEmail());
            return ResponseEntity.ok("User Updated Successfully");
        } catch (Exception e) {
            LOGGER.error("Failed to update user details by email: " + user.getEmail());
            return ResponseEntity.badRequest().body("Failed to update user details");
        }
    }

    @DeleteMapping("/deleteUser/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable int userId){

        try {
            userServiceInterface.deleteUser(userId);
            LOGGER.info("User Deleted Successfully by user id: "+userId);
            return ResponseEntity.ok("User Deleted Successfully");
        } catch (Exception e) {
            LOGGER.error("Failed to delete user details by user id: "+userId);
            return ResponseEntity.badRequest().body("Failed to delete user details");
        }
    }
}
