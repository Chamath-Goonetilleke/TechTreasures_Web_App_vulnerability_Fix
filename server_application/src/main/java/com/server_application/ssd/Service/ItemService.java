package com.server_application.ssd.Service;

import com.server_application.ssd.DTO.ItemDTO;
import com.server_application.ssd.Models.Item;
import com.server_application.ssd.Repository.CartRepository;
import com.server_application.ssd.Repository.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

@Service
public class ItemService implements ItemServiceInterface{

    private final JdbcTemplate jdbcTemplate;
    @Autowired
    ItemRepository itemRepository;
    @Autowired
    CartRepository cartRepository;

    public ItemService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional
    public void createNewItem(ItemDTO item){

        Item newItem = new Item();
        newItem.setName(item.getName());
        newItem.setPrice(item.getPrice());
        newItem.setDescription(item.getDescription());
        newItem.setQuantity(item.getQuantity());
        itemRepository.save(newItem);

        int itemId = itemRepository.getNewItemId();

        List<String> imageUrls = item.getImageUrls();
        if (imageUrls != null && !imageUrls.isEmpty()) {
            for (String imageUrl : imageUrls) {
                itemRepository.addNewItem(itemId, imageUrl);
            }
        }

    }

    public List<Item> getAllItems() {

        String selectAllItemsSql = "SELECT * FROM items";
        List<Item> items = itemRepository.findAll();

        for (Item item : items) {
            List<String> imageUrls = cartRepository.findImageUrlsByItemId(item.getId());
            item.setImageUrls(imageUrls);
        }

        return items;
    }

    public Item getItemById(int itemId) {

        Item item = itemRepository.findById(itemId);

        if (item != null) {
            List<String> imageUrls = cartRepository.findImageUrlsByItemId(item.getId());
            item.setImageUrls(imageUrls);

        }
        return item;
    }

    public void updateItem(Item item) {

        itemRepository.updateItemById(item.getName(), item.getPrice(),item.getDescription(),item.getQuantity(),item.getId());

        List<String> imageUrls = item.getImageUrls();
        if (imageUrls != null && !imageUrls.isEmpty()) {

            itemRepository.deleteImageUrlsSql(item.getId());

            for (String imageUrl : imageUrls) {
                itemRepository.insertImageUrlsSql(item.getId(), imageUrl);
            }
        }
    }

    public void deleteItem(int itemId) {
        itemRepository.deleteImageUrlsSql(itemId);
        itemRepository.deleteById(itemId);
    }
}
