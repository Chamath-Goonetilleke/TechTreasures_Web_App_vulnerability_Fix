package com.server_application.ssd.Service;

import com.server_application.ssd.DTO.AuthUser;
import com.server_application.ssd.Models.User;
import com.server_application.ssd.Repository.UserRepository;
import org.apache.commons.codec.binary.Hex;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import java.sql.ResultSet;
import java.sql.SQLException;

@Service
public class UserService implements UserServiceInterface{

    private final JdbcTemplate jdbcTemplate;
    @Autowired
    public UserRepository userRepository;

    public UserService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void createUser(User user) {
        String insertUserSql = "INSERT INTO user (name, email, password, userRole, phoneNumber, address) VALUES (?, ?, ?, ?, ?, ?)";

//        String password = User.encrypt(user.getPassword());

        jdbcTemplate.update(
                insertUserSql,
                user.getName(),
                user.getEmail(),
                user.getPassword(),
                "USER",
                null,
                null
        );
    }

    public User auth(AuthUser authUser) {

        try {
            User user = userRepository.auth(authUser.getEmail(), authUser.getPassword());
            return user;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public User getUserById(int userId) {
        User user = userRepository.findById(userId);
        return user;
    }

    public void updateUser(User user) {
        userRepository.updateUser(user.getName(),user.getPhoneNumber(),user.getAddress(),user.getId());
    }

    public void deleteUser(int userId) {
//        String deleteUserSql = "DELETE FROM user WHERE id = ?";
//        jdbcTemplate.update(deleteUserSql, userId);
        userRepository.deleteById(userId);
    }


    public static class UserRowMapper implements RowMapper<User> {
        @Override
        public User mapRow(ResultSet rs, int rowNum) throws SQLException {
            User user = new User();
            user.setId(rs.getInt("id"));
            user.setName(rs.getString("name"));
            user.setEmail(rs.getString("email"));
            user.setPassword(rs.getString("password"));
            user.setUserRole(rs.getString("userRole"));
            user.setPhoneNumber(rs.getString("phoneNumber"));
            user.setAddress(rs.getString("address"));
            return user;
        }

    }

}
