package com.server_application.ssd.Service;

import com.server_application.ssd.Controller.UserController;
import com.server_application.ssd.DTO.OrderDTO;
import com.server_application.ssd.Models.Cart;
import com.server_application.ssd.Models.Item;
import com.server_application.ssd.Models.Order;
import com.server_application.ssd.Repository.CartRepository;
import com.server_application.ssd.Repository.ItemRepository;
import com.server_application.ssd.Repository.OrderRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class OrderService implements OrderServiceInterface{

    @Autowired
    public OrderRepository orderRepository;
    @Autowired
    public CartRepository cartRepository;
    @Autowired
    public ItemRepository itemRepository;

    private static final Logger LOGGER = LogManager.getLogger(OrderService.class);

    public void createNewOrder(Order order) {
        Order order1 = new Order();
        order1.setCustomerId(order.getCustomerId());
        order1.setTotalAmount(order.getTotalAmount());
        order1.setOrderedDate(order.getOrderedDate());
        order1.setIsComplete(order.getIsComplete());
        orderRepository.save(order1);
        LOGGER.info("Successfully inserted the new Order");

        int newOrderId = orderRepository.findNewOrderId();
        LOGGER.info("Successfully fetched last Order Id");

        List<String> orderedItems = order.getOrderedItems();
        if (orderedItems != null && !orderedItems.isEmpty()) {
            for (String orderedItem : orderedItems) {

                orderRepository.insertImageUrlsSql(newOrderId, orderedItem);
            }
        }
        LOGGER.info("Successfully inserted the new Order Image URL");
    }

    public List<OrderDTO> getAllOrders() {

        List<Order> orders = orderRepository.findAll();

        List<OrderDTO> orderList = new ArrayList<>();

        for (Order order : orders) {
            OrderDTO orderDTO = getItemDetails(order);
            orderList.add(orderDTO);
        }
        LOGGER.info("Successfully fetched all Orders");
        return orderList;
    }

    public OrderDTO getOrderById(int orderId) {

        Order order = orderRepository.findById(orderId);
        OrderDTO orderDTO = new OrderDTO();
        if (order != null) {
            orderDTO = getItemDetails(order);
        }
        LOGGER.info("Successfully fetched Orders by Id");
        return orderDTO;
    }

    public void completeOrder(int orderId) {

        orderRepository.updateOrderSql(true, orderId);
        LOGGER.info("Successfully updated the Order");

    }

    public void deleteOrder(int orderId) {

        orderRepository.deleteById(orderId);
        LOGGER.info("Successfully deleted the Order by Id");
        orderRepository.deleteOrderedItems(orderId);
        LOGGER.info("Successfully deleted the ordered Items");
    }

    public OrderDTO getItemDetails(Order order) {
        OrderDTO orderDTO = new OrderDTO();
        orderDTO.setId(order.getId());
        orderDTO.setCustomerId(order.getCustomerId());
        orderDTO.setTotalAmount(order.getTotalAmount());

        List<Map<String, Integer>> orderedItems = new ArrayList<>();
        List<String> carIds = orderRepository.selectOrderedItemSql(order.getId());

        for (String cartId : carIds) {
            int cartIds = Integer.parseInt(cartId);
            Cart cart = cartRepository.findById(cartIds);

            if (cart != null) {
                Item item = itemRepository.findById(cart.getItemId());
                String itemName = item.getName();

                Map<String, Integer> itemInfo = new HashMap<>();
                itemInfo.put(itemName, cart.getQuantity());
                orderedItems.add(itemInfo);
            }
        }
        orderDTO.setOrderedItem(orderedItems);
        orderDTO.setOrderedDate(order.getOrderedDate());
        orderDTO.setIsComplete(order.getIsComplete());
        LOGGER.info("Successfully fetched Item Details");
        return orderDTO;
    }


}
