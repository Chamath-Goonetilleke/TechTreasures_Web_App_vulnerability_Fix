package com.server_application.ssd.Service;

import com.server_application.ssd.DTO.CartDTO;
import com.server_application.ssd.Models.Cart;
import com.server_application.ssd.Models.Item;
import com.server_application.ssd.Repository.CartRepository;
import com.server_application.ssd.Repository.ItemRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
@Transactional
@Service
public class CartService implements CartServiceInterface{
    private final JdbcTemplate jdbcTemplate;
    @Autowired
    CartRepository cartRepository;
    @Autowired
    ItemRepository itemRepository;

    public CartService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    public List<Item> getCartByIds(int userId) {
        List<Item> jsonObjects = new ArrayList<>();
        List<Cart> carts = cartRepository.findByUserId(userId);
        for (int i = 0; i < carts.size(); i++) {
            Item item = itemRepository.findById(carts.get(i).getItemId());
            if (item != null) {
                List<String> imageUrls = cartRepository.findImageUrlsByItemId(item.getId());
                item.setImageUrls(imageUrls);
            }
            jsonObjects.add(item);
        }
        return jsonObjects;
    }

    public void createNewCart(CartDTO cart) {
//        String insertCartSql = "INSERT INTO carts (itemId, userId, quantity) VALUES (?, ?, ?)";
//        jdbcTemplate.update(
//                insertCartSql,
//                cart.getItemId(),
//                cart.getUserId(),
//                cart.getQuantity()
//        );
        Cart cartNew = new Cart();
        cartNew.setItemId(cart.getItemId());
        cartNew.setUserId(cart.getUserId());
        cartNew.setQuantity(cart.getQuantity());
        cartRepository.save(cartNew);
    }

    public class CartRowMapper implements RowMapper<Cart> {
        @Override
        public Cart mapRow(ResultSet rs, int rowNum) throws SQLException {
            Cart cart = new Cart();
            cart.setId(rs.getInt("id"));
            cart.setItemId(rs.getInt("itemId"));
            cart.setUserId(rs.getInt("userId"));
            cart.setQuantity(rs.getInt("quantity"));
            return cart;
        }

    }
    public class ItemsRowMapper implements RowMapper<Item> {
        @Override
        public Item mapRow(ResultSet rs, int rowNum) throws SQLException {
            Item item = new Item();
            item.setId(rs.getInt("id"));
            item.setName(rs.getString("name"));
            item.setPrice(rs.getString("price"));
            item.setDescription(rs.getString("description"));
            return item;
        }

    }
}
